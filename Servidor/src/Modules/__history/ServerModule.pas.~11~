unit ServerModule;

interface

uses
  System.SysUtils, System.Classes, Datasnap.DSServer, Datasnap.DSAuth,
  Datasnap.DSProviderDataModuleAdapter, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.PG,
  FireDAC.Phys.PGDef, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, FireDAC.VCLUI.Wait, FireDAC.Comp.UI, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client;

type
  TServerModule = class(TDSServerModule)
    FDConnection: TFDConnection;
    FDTransaction: TFDTransaction;
    FDGUIxWaitCursor: TFDGUIxWaitCursor;
    FDPhysPgDriverLink: TFDPhysPgDriverLink;
  private
    procedure ConfigureDatabase;
  public
    procedure ConnectToDatabase;
    function CreateQuery: TFDQuery;
  end;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TServerModule }

procedure TServerModule.ConfigureDatabase;
begin
  FDConnection.Params.DriverID := 'PG';
  FDConnection.Params.Database := 'Teste'; // Nome do banco de dados
  FDConnection.Params.UserName := 'postgres';
  FDConnection.Params.Password := 'postgres';
  FDConnection.Params.Add('Server=localhost');
  FDConnection.Params.Add('Port=5432');
end;

procedure TServerModule.ConnectToDatabase;
begin
  if not FDConnection.Connected then
  begin
    try
      ConfigureDatabase;
      FDConnection.Connected := True;
    except
      on E: Exception do
        raise Exception.Create('Erro ao conectar ao banco: ' + E.Message);
    end;
  end;
end;

function TServerModule.CreateQuery: TFDQuery;
begin
  Result := TFDQuery.Create(nil);
  Result.Connection := FDConnection;
  Result.Transaction := FDTransaction;
end;

end.

