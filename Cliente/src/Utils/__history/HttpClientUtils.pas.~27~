unit HttpClientUtils;

interface

uses
  System.SysUtils, System.Classes, IdHTTP, IdSSLOpenSSL, System.Net.HttpClient,
  System.Net.HttpClientComponent, System.JSON;

type
  THttpClientUtils = class
  private

  public
    FBaseUrl: string;
    class function GetBaseUrl: string;
    class function Get(const URL: string): TJSONValue; static;
    class function Post(const URL: string; const Body: TJSONObject)
      : TJSONValue; static;
    class function Put(const URL: string; const Body: TJSONObject)
      : TJSONValue; static;

    class function Delete(const URL: string): TJSONValue; static;
    constructor Create;
  end;

implementation

uses
  IniFiles;

constructor THttpClientUtils.Create;
var
  IniFilePath: string;
  IniFile: TIniFile;
begin
  // Ajuste o caminho para encontrar o arquivo no local correto
  IniFilePath := ExtractFilePath(ParamStr(0)) + '..\..\Config\AppConfig.ini';
  // Caminho relativo

  // Verifica se o arquivo INI existe
  if not FileExists(IniFilePath) then
    raise Exception.Create('Arquivo AppConfig.ini não encontrado em: ' +
      IniFilePath);

  // Lê o arquivo INI
  IniFile := TIniFile.Create(IniFilePath);
  try
    FBaseUrl := IniFile.ReadString('Server', 'BaseUrl', '');
    if FBaseUrl.Trim.IsEmpty then
      raise Exception.Create
        ('A URL do servidor não foi configurada no arquivo AppConfig.ini.');
  finally
    IniFile.Free;
  end;
end;

class function THttpClientUtils.GetBaseUrl: string;
var
  IniFile: TIniFile;
  IniFilePath: string;
begin
  // Ajusta para sempre procurar a pasta Config no diretório do projeto
  IniFilePath := ExtractFilePath(ParamStr(0)) + '..\..\Config\AppConfig.ini';

  // Verifica se o arquivo INI existe
  if not FileExists(IniFilePath) then
    raise Exception.Create('Arquivo AppConfig.ini não encontrado em: ' +
      IniFilePath);

  IniFile := TIniFile.Create(IniFilePath);
  try
    Result := IniFile.ReadString('Server', 'BaseUrl', '');
    if Result.IsEmpty then
      raise Exception.Create('BaseUrl não configurado no AppConfig.ini');
  finally
    IniFile.Free;
  end;
end;

class function THttpClientUtils.Get(const URL: string): TJSONValue;
var
  HTTP: TIdHTTP;
  SSLHandler: TIdSSLIOHandlerSocketOpenSSL;
  ResponseString: string;
begin
  HTTP := TIdHTTP.Create(nil);
  SSLHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  try
    HTTP.IOHandler := SSLHandler;
    HTTP.Request.ContentType := 'application/json';

    try
      // Realiza a requisição GET
      ResponseString := HTTP.Get(URL);

      // Verifica se a resposta não está vazia
      if ResponseString.Trim.IsEmpty then
        raise Exception.Create('Resposta vazia recebida do servidor.');

      // Converte a resposta em TJSONValue
      Result := TJSONObject.ParseJSONValue(ResponseString);

      // Verifica se a conversão foi bem-sucedida
      if not Assigned(Result) then
        raise Exception.Create('Falha ao converter a resposta para JSON.');

    except
      on E: Exception do
        raise Exception.Create('Erro ao realizar requisição GET: ' + E.Message);
    end;

  finally
    HTTP.Free;
    SSLHandler.Free;
  end;
end;

class function THttpClientUtils.Post(const URL: string; const Body: TJSONObject)
  : TJSONValue;
var
  HTTP: TIdHTTP;
  SSLHandler: TIdSSLIOHandlerSocketOpenSSL;
  RequestBody: TStringStream;
  ResponseString: string;
begin
  HTTP := TIdHTTP.Create(nil);
  SSLHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  RequestBody := TStringStream.Create(Body.ToString, TEncoding.UTF8);
  try
    HTTP.IOHandler := SSLHandler;
    HTTP.Request.ContentType := 'application/json';

    // Realiza a requisição POST
    ResponseString := HTTP.Post(URL, RequestBody);

    // Converte a resposta em TJSONValue
    Result := TJSONObject.ParseJSONValue(ResponseString);
  finally
    HTTP.Free;
    SSLHandler.Free;
    RequestBody.Free;
  end;
end;

class function THttpClientUtils.Put(const URL: string; const Body: TJSONObject)
  : TJSONValue;
var
  HTTP: TIdHTTP;
  SSLHandler: TIdSSLIOHandlerSocketOpenSSL;
  RequestBody: TStringStream;
  ResponseString: string;
begin
  HTTP := TIdHTTP.Create(nil);
  SSLHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  RequestBody := TStringStream.Create(Body.ToString, TEncoding.UTF8);
  try
    HTTP.IOHandler := SSLHandler;
    HTTP.Request.ContentType := 'application/json';

    // Realiza a requisição PUT
    ResponseString := HTTP.Put(URL, RequestBody);

    // Converte a resposta em TJSONValue
    Result := TJSONObject.ParseJSONValue(ResponseString);
  finally
    HTTP.Free;
    SSLHandler.Free;
    RequestBody.Free;
  end;
end;

class function THttpClientUtils.Delete(const URL: string): TJSONValue;
var
  URL: string;
  ResponseJson: TJSONValue;
  JsonObj: TJSONObject;
  SuccessValue: string;
begin
  Result := False; // Inicializa como falso por padrão

  try
    // Monta a URL para a requisição DELETE
    URL := FBaseUrl + '/pessoa/' + ID.ToString;

    // Realiza a requisição DELETE e obtém a resposta em formato JSON
    ResponseJson := THttpClientUtils.Delete(URL);

    try
      // Verifica se a resposta é um objeto JSON válido
      if not(ResponseJson is TJSONObject) then
        raise Exception.Create
          ('A resposta do servidor não é um objeto JSON válido.');

      // Realiza o cast explícito para TJSONObject
      JsonObj := TJSONObject(ResponseJson);

      // Verifica se a chave 'success' existe no JSON
      if JsonObj.TryGetValue<string>('success', SuccessValue) then
      begin
        // Verifica o valor de 'success' e define o resultado
        if SuccessValue = 'true' then
          Result := True
        else
          raise Exception.Create
            ('A operação falhou. O servidor retornou um erro.');
      end
      else
        raise Exception.Create
          ('A chave "success" não foi encontrada na resposta do servidor.');

    finally
      // Libera o JSON da memória após o uso
      ResponseJson.Free;
    end;

  except
    on E: Exception do
    begin
      // Lança uma exceção com detalhes do erro
      raise Exception.Create('Erro ao excluir pessoa: ' + E.Message);
    end;
  end;
end;

end.
